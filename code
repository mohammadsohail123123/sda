

import java.util.Scanner;

public class BankApplicationRunner {


    public static void main(String[] args) {
        Customer customer = null;
        ProcessBank(customer);
    }

    public static void ProcessBank(Customer customer) {
        System.out.println();
        System.out.println("Please Select an option below:");
        System.out.println("Press 1 to Deposit Amount.");
        System.out.println("Press 2 to Withdraw Amount.");
        System.out.println("Press 3 to View Balance");
        if (customer == null) {
            System.out.println("Press 4 to Open Account ");
        }
        System.out.println("Press 5 to calculateCompundInterest");
        System.out.println("Press any key to Exit");
        System.out.println(" ");
        Scanner scanner = new Scanner(System.in);
        System.out.println("Press any key:");

        int selectedOption = scanner.nextInt();
        switch (selectedOption) {
            case 1:
                if (checkAccountPresent(customer)) {
                    System.out.println("Enter the amount to be deppsited");
                    int amount = scanner.nextInt();
                    customer.deposit(amount);
                    ProcessBank(customer);
                } else {
                    System.out.println("Account not found please create");
                    ProcessBank(customer);
                }
                break;

            case 2:
                if (checkAccountPresent(customer)) {
                    System.out.println("Please Enter the amount to withdrawn:");
                    int amount = scanner.nextInt();
                    customer.withdraw(amount);
                    ProcessBank(customer);
                } else {
                    System.out.println("Account not found please create");
                    ProcessBank(customer);
                }
                break;

            case 3:
                if (checkAccountPresent(customer)) {
                    customer.displayAccountBalance();
                    ProcessBank(customer);
                } else {
                    System.out.println("Account not found please create");
                    ProcessBank(customer);
                }
                break;

            case 4:

                System.out.println("Enter account Number");
                String accountNumber = scanner.next();
                Customer c = new Customer(accountNumber);

                System.out.println("Press 1 for Creating Savings Account");
                System.out.println("Press 2 for Creating Current Account");
                int choice = 1;

                while (choice > 0) {
                    System.out.println("Enter choice");
                    choice = scanner.nextInt();
                    switch (choice) {
                        case 1:
                            c.setAccountType("SAVINGS");

                            choice = 0;
                            break;

                        case 2:
                            c.setAccountType("CURRENT");
                            choice = 0;
                            break;
                        default:
                            System.out.println("Incorrect Choice Selected :: Tranasaction Ended");
                            //System.exit(0);
                            break;
                    }
                }

                System.out.println("Account Created Successfully");
                c.printDetails();

                ProcessBank(c);
                break;

            case 5:
                if (checkAccountPresent(customer)) {
                    Loan loan = new Loan(customer);
                    loan.CalculateCompoundInterest();

                } else {
                    System.out.println("Account not found please create");
                    ProcessBank(customer);
                }
                break;
            default:
                System.out.println("Transaction Ended");
                System.exit(0);
                break;
        }

    }

    private static boolean checkAccountPresent(Customer account) {
        return account != null ? true : false;
    }


}

class Account {
    private double accountBalance = 1000;
    private String accountNumber;
    private String accountType;

    public Account(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    void withdraw(int amount) {
        System.out.println("Amount to be Withdrwan :: " + amount);
        if (this.accountBalance - amount >= 1000) {
            this.accountBalance = this.accountBalance - amount;
            System.out.println("Successfully Amount detucted from account number " + this.accountNumber);
            displayAccountBalance();
        } else {
            System.out.println("Amount cannot be withdrawn");
        }

    }

    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }

    void deposit(int amount) {
        System.out.println("Amount to be deposited " + amount);
        this.accountBalance += amount;
        System.out.println("Account deposied successfully \n");

        displayAccountBalance();
    }

    void displayAccountBalance() {
        System.out.println("Account balance for Account number " + accountNumber + " is " + accountBalance);
    }

    double getAccountBalance() {
        return this.accountBalance;
    }

    void printDetails() {
        System.out.println("Account Number  ::" + this.accountNumber);
        System.out.println("Account type  ::" + this.accountType);
        System.out.println("Account Balance :: " + this.accountBalance);
    }
}

class Customer extends Account {

    private String name;

    public Customer(String accountNumber) {
        super(accountNumber);
    }

}

class Employee extends Account {

    public Employee(String accountNumber) {
        super(accountNumber);
    }
}

class Loan {
    private Customer customer;

    Loan(Customer customer) {
        this.customer = customer;
    }

    public void CalculateCompoundInterest() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Calculating compound interest");
        System.out.println("Enter bank loan amount");
        double principal = scanner.nextInt();
        System.out.println("Enter rate of interest");
        double rate = scanner.nextDouble();
        System.out.println("Enter time");
        int time = scanner.nextInt();

        double CI = principal *
                (Math.pow((1 + rate / 100), time));

        System.out.println("Total Amount is " + CI);
        double interest = CI - principal;
        System.out.println("Total interest  is  " + interest);

//        customer.deposit((int) principal);
//        customer.withdraw((int) CI);
    }
}

